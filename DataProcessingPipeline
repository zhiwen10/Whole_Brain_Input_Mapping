A, cell coordinates in 3D and brain atlas registration
1, image preprocessing
Step 1: To achieve ideal result for cell detection and cell classification with reduced image noise, stitched images were first filtered with a Gaussian blur (sigma = 1) using Fiji (ImageJ 1.52e) with recursive batch process Macro script.
Script here.
Step 2: Create a text file with z-consecutive list of image paths for each channel, which can be used to load image files with ease in later steps.
create file list for red channel files (ch02)
using find /somewhere/ -name \*ch00.tif | sort > somefile_ch02.txt
find /media/rancze/RanczLabTV1/TLX_tomato_Rob_SWC/stitchedImages_100/2/ -name
\*.tif | sort >
/media/rancze/RanczLabTV1/TLX_tomato_Rob_SWC/stitchedImages_100/2/ch02.txt
2, cell detection (red channel)
Before proceeding, open a terminal, set the use limit of system resources
Check current system limit
ulimit –Sn
system return: 1024
change system limit
ulimit –n 4096
verify system limit
ulimit –Sn
system return: 4096 
Use the same terminal with updated system limit for the following steps.
Step 1: Use red channel as image source, give parameters ‘--soma-diameter’ and ‘--ball-xy-size’ appropriate numbers, based on image resolution, and background noise level. The result is a .xml file containing all candidate cell coordinates.
Rule of thumb: For 2 m/pixel images, ‘--soma-diameter’ use 8, ‘--ball-xy-size’ use 5.
For 1.2 m/pixel images, ‘--soma-diameter’ use 2/1.2*8 =13.33 ~=14, ‘--ball-xy-size’ use 2/1.2*5 = 8.33 ~=7 or 9 (use odd number).
For 1.2 mm/pixel images with noise background, due to bad perfusion, high laser power, etc, use higher parameters, such as ‘--soma-diameter’ 20, ‘--ball-xy-size’ 11.
cd ~/code/n_count_python/n_count_python
python3 main.py '/media/rancze/RanczLabTV1/final_analysis/BRAC3859_1c_analysis/BRAC3859_1c_gaussian1pixel/2/ch02.txt' /media/rancze/RanczLabTV1/final_analysis/BRAC3859_1c_analysis/n_count_python_ch02_2/ --soma-diameter 14 --ball-xy-size 7 --ball-overlap-fraction 0.75 --n-free-cpus 2 
Step 2: scale candidate cell coordinates to 1mm/pixel for cube extraction and classification.
Script here.
Step 3: Cube extraction.
Use the detected candidate cell coordinates in the last step to extract candidate cell cubes to a saved folder with 50 x 50 x 20 dimension.
Step 4: niftynet cell classification
Feed the candidate cell cubes to trained neural network for cell classification. Output is .xml file with noncells in Type1 category, cells in Type2 category.
cd ~/niftynet/tools/niftynet_cell_count/ 
python3 run_all.py /my/brain/directory/cubes/class_1 0 1 --out-file /my/brain/directory/classification.xml
3, cell detection (green channel)
Step 1: same procedure as Step 1 in cell detection (red channel), but with only images containing green cells. For instance: only detect candidate cells from image 500-800.
cd ~/code/n_count_python/n_count_python
python3 main.py '/media/rancze/RanczLabTV1/final_analysis/BRAC3859_1c_analysis/BRAC3859_1c_gaussian1pixel/2/ch02.txt' /media/rancze/RanczLabTV1/final_analysis/BRAC3859_1c_analysis/n_count_python_ch02_2/ --soma-diameter 14 --ball-xy-size 7 --ball-overlap-fraction 0.75 --n-free-cpus 2 –start-plane 500 –end-plane 800
Step 2: scale candidate cell coordinates to 1mm/pixel for cube extraction and classification, using provided script. Same as Step2 in cell detection (red channel).
In addition, transform candidate cell coordinates from z to z+499. The first image used to extract candidate cells was counted as z=1 in the xml file. However, in the whole brain section series, it is actually z=1+499. X, Y values do not change.
Script here.
Step 3-4: Same as Step 3-4 in cell detection (red channel). 

4, aMap brain registration and segmentation
aMap package is used for anatomical segmentation of mouse brain samples.
python3 main.py '/media/rancze/RanczLabTV1/final_analysis/ERAA10_4h_analysis/ERAA10_4h_gaussian1pixel/4/ch04.txt' ERAA10_4h /media/rancze/RanczLabTV1/final_analysis/ERAA10_4h_analysis/ERAA10_4h_amap -x 0.0012 -y 0.0012 -z 0.005 --flip-x --preprocess --load-parallel --left-right --generate-outlines --save-unfiltered –r
